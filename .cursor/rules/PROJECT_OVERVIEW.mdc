---
description: 
globs: 
alwaysApply: true
---
본 프로젝트의 개요 및 아키텍쳐 등의 전반적인 내용을 포함합니다.

# AI 기반 JIRA-GitHub 워크플로우 자동화 시스템

## 프로젝트 개요

### 목표
사용자가 JIRA에서 작업 계획을 세우면 AI 에이전트가 자동으로 PR을 생성하고, PR 코멘트 시 AI가 자동으로 업데이트하는 지능형 워크플로우 시스템 구축

### 핵심 가치 제안
- **지능형 자동화**: 단순 자동화가 아닌 AI 기반 의사결정
- **컨텍스트 이해**: 이슈 내용을 분석하여 적절한 코드 생성
- **대화형 워크플로우**: 필요시 사용자와 대화로 요구사항 명료화
- **연속적 개선**: PR 피드백을 통한 지속적인 코드 업데이트

## 기술 스택

### 백엔드 인프라
- **Node.js + Express**: 웹서버 및 웹훅 이벤트 수신
- **이벤트 큐 시스템**: 비동기 이벤트 처리

### AI 워크플로우
- **LangChain**: AI 에이전트 기반 개발 프레임워크
- **LangGraph**: 복잡한 AI 의사결정 워크플로우 관리
- **Claude Code**: 고품질 코드 생성 및 수정

### 플랫폼 연동
- **MCP (Model Context Protocol)**: 플랫폼별 연동 표준화
- **JIRA API**: 이슈 관리 및 상태 추적
- **GitHub API**: PR 생성 및 코드 리뷰 관리

## 시스템 아키텍처

### 1. 이벤트 수신층 (Node.js + Express)
```
외부 플랫폼 → Webhook → Express 엔드포인트 → 이벤트 큐 → 워크플로우 트리거
```

**주요 기능:**
- JIRA 웹훅 수신 (이슈 생성, 상태 변경, 코멘트)
- GitHub 웹훅 수신 (PR 코멘트, 리뷰 요청)
- 이벤트 검증 및 라우팅
- 비동기 처리를 위한 큐 관리

### 2. AI 워크플로우층 (LangGraph)
```
이벤트 분석 → 컨텍스트 수집 → 사용자 대화 → 조건부 분기 → 액션 실행
```

**워크플로우 단계:**
1. **이벤트 분석**: 수신된 이벤트 타입 및 내용 파악
2. **컨텍스트 수집**: 관련 이슈, 프로젝트 정보, 코드베이스 분석
3. **의사결정 트리**: 자동 실행 vs 사용자 확인 필요 여부 판단
4. **대화형 명료화**: 필요시 JIRA 코멘트를 통한 추가 정보 수집
5. **액션 실행**: 조건 충족시 자동 PR 생성 또는 코드 업데이트

### 3. 플랫폼 연동층 (MCP)
```
AI 워크플로우 ↔ MCP 표준 인터페이스 ↔ 각 플랫폼 MCP 서버
```

**MCP 서버 구성:**
- **JIRA MCP 서버**: 이슈 조회, 수정, 상태 변경, 코멘트 관리
- **GitHub MCP 서버**: 레포지토리 관리, PR 생성/수정, 코드 리뷰
- **Claude Code MCP**: 코드 생성, 수정, 리팩토링, 테스트 작성

## 워크플로우 시나리오

### 시나리오 1: 새로운 기능 개발
1. **트리거**: 사용자가 JIRA에서 "Feature" 타입 이슈 생성
2. **분석**: AI가 이슈 제목, 설명, 라벨 분석
3. **컨텍스트 수집**: 관련 코드베이스, 기존 패턴, 의존성 파악
4. **명료화**: 필요시 JIRA 코멘트로 구체적 요구사항 질문
5. **코드 생성**: Claude Code를 통한 초기 구현 코드 작성
6. **PR 생성**: GitHub에 자동 PR 생성 및 JIRA 이슈 연결
7. **지속적 개선**: PR 코멘트 피드백을 통한 코드 업데이트

### 시나리오 2: 버그 수정
1. **트리거**: JIRA에서 "Bug" 타입 이슈 생성
2. **오류 분석**: 스택 트레이스, 재현 단계, 관련 코드 영역 파악
3. **근본 원인 분석**: 코드베이스 스캔을 통한 잠재적 원인 식별
4. **수정안 제안**: 여러 수정 방안 제시 및 사용자 선택 대기
5. **수정 구현**: 선택된 방안에 따른 코드 수정 및 테스트 작성
6. **검증**: 자동 테스트 실행 및 결과 보고

### 시나리오 3: 코드 리팩토링
1. **트리거**: "Technical Debt" 또는 "Refactoring" 라벨 이슈
2. **코드 품질 분석**: 기존 코드의 복잡도, 중복, 성능 이슈 파악
3. **리팩토링 계획**: 단계별 개선 방안 수립
4. **점진적 개선**: 여러 PR로 나누어 안전한 리팩토링 진행
5. **성능 검증**: 리팩토링 전후 성능 비교 및 보고

## 핵심 기술 개념

### Webhook 이벤트 처리
- **실시간 이벤트**: 외부 플랫폼 변경사항을 HTTP 요청으로 수신
- **이벤트 검증**: 서명 검증을 통한 보안 확보
- **멱등성 보장**: 중복 이벤트 처리 방지
- **오류 복구**: 재시도 메커니즘 및 데드레터 큐

### Express 서버 구조
```javascript
// 예시 구조
app.post('/webhook/jira', authenticateJira, parseJiraEvent, triggerWorkflow);
app.post('/webhook/github', authenticateGitHub, parseGitHubEvent, triggerWorkflow);
```

### LangGraph 워크플로우 정의
```python
# 예시 워크플로우 노드
workflow = StateGraph(AgentState)
workflow.add_node("analyze_event", analyze_event_node)
workflow.add_node("collect_context", collect_context_node)
workflow.add_node("make_decision", decision_node)
workflow.add_node("generate_code", code_generation_node)
workflow.add_node("create_pr", pr_creation_node)
```

### MCP 서버 연동
- **표준화된 인터페이스**: 플랫폼별 차이점 추상화
- **컨텍스트 공유**: 여러 플랫폼 간 정보 연계
- **확장성**: 새로운 플랫폼 추가 용이성

## 구현 단계

### Phase 1: 기본 인프라 구축
- [ ] Express 서버 및 웹훅 엔드포인트 구현
- [ ] JIRA, GitHub 웹훅 연동
- [ ] 기본 이벤트 파싱 및 로깅
- [ ] MCP 서버 기본 구조 구현

### Phase 2: AI 워크플로우 구현
- [ ] LangGraph 기반 워크플로우 설계
- [ ] 이벤트 분석 및 의사결정 로직
- [ ] JIRA 코멘트를 통한 대화형 인터페이스
- [ ] Claude Code 연동

### Phase 3: 자동화 구현
- [ ] 자동 PR 생성 로직
- [ ] 코드 리뷰 피드백 처리
- [ ] 지속적 코드 업데이트
- [ ] 에러 처리 및 모니터링

### Phase 4: 고도화
- [ ] 학습 기반 개선
- [ ] 성능 최적화
- [ ] 보안 강화
- [ ] 확장성 개선

## 예상 효과

### 개발 생산성 향상
- **자동화된 초기 구현**: 반복적인 보일러플레이트 코드 작성 자동화
- **신속한 프로토타이핑**: 아이디어에서 코드까지의 시간 단축
- **일관된 코드 품질**: AI 기반 베스트 프랙티스 적용

### 협업 효율성 증대
- **명확한 의사소통**: 요구사항 명료화를 통한 오해 감소
- **투명한 진행상황**: JIRA-GitHub 자동 연동으로 실시간 추적
- **지속적 개선**: 피드백 루프를 통한 점진적 품질 향상

### 기술 부채 감소
- **자동 리팩토링**: 정기적인 코드 품질 개선
- **테스트 자동 생성**: 코드 변경 시 자동 테스트 케이스 작성
- **문서 동기화**: 코드 변경에 따른 문서 자동 업데이트

## 주의사항 및 고려사항

### 보안
- 웹훅 서명 검증 필수
- API 토큰 안전한 관리
- 코드 실행 권한 최소화

### 성능
- 대용량 이벤트 처리를 위한 큐 시스템
- AI 모델 응답 시간 최적화
- 캐싱 전략 수립

### 확장성
- 마이크로서비스 아키텍처 고려
- 플러그인 형태의 MCP 서버 구조
- 설정 기반 워크플로우 커스터마이징

---

*이 문서는 AI 기반 워크플로우 자동화 시스템의 전체적인 설계 및 구현 방향을 제시합니다. 세부 구현 사항은 프로젝트 진행에 따라 지속적으로 업데이트됩니다.*